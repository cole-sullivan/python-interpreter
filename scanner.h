#ifndef SCANNER_H
#define SCANNER_H

#define MAX_INDENT_STACK 256
#define MAX_CONTINUATION_STACK 256

typedef enum {
	// Indentation
	TOKEN_INDENT, TOKEN_DEDENT,
	TOKEN_NO_CHANGE,
	// Single-character tokens.
	TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
	TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
	TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,
	TOKEN_COMMA, TOKEN_DOT,
	TOKEN_SEMICOLON, TOKEN_TILDE,
	// One or two character tokens.
	TOKEN_BANG, TOKEN_BANG_EQUAL,
	TOKEN_PERCENT, TOKEN_PERCENT_EQUAL,
	TOKEN_AMPER, TOKEN_AMPER_EQUAL,
	TOKEN_PLUS, TOKEN_PLUS_EQUAL,
	TOKEN_COLON, TOKEN_COLON_EQUAL,
	TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
	TOKEN_AT, TOKEN_AT_EQUAL,
	TOKEN_CIRCUMFLEX, TOKEN_CIRCUMFLEX_EQUAL,
	TOKEN_VBAR, TOKEN_VBAR_EQUAL,
	TOKEN_MINUS, TOKEN_MINUS_EQUAL,
	TOKEN_GREATER, TOKEN_GREATER_EQUAL,
	TOKEN_LESS, TOKEN_LESS_EQUAL,
	TOKEN_STAR, TOKEN_STAR_EQUAL,
	TOKEN_SLASH, TOKEN_SLASH_EQUAL,
	TOKEN_NOT_EQUAL, TOKEN_ARROW,
	// Two or three character tokens.
	TOKEN_LEFT_SHIFT, TOKEN_LEFT_SHIFT_EQUAL,
	TOKEN_RIGHT_SHIFT, TOKEN_RIGHT_SHIFT_EQUAL,
	TOKEN_DOUBLESTAR, TOKEN_DOUBLESTAR_EQUAL,
	TOKEN_DOUBLESLASH, TOKEN_DOUBLESLASH_EQUAL,
	TOKEN_ELLIPSES,
	// Literals.
	TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,
	// Keywords.
	TOKEN_AND, TOKEN_AS, TOKEN_ASSERT, TOKEN_ASYNC,
	TOKEN_AWAIT, TOKEN_BREAK, TOKEN_CASE, TOKEN_CLASS,
	TOKEN_CONTINUE, TOKEN_DEF, TOKEN_DEL, TOKEN_ELIF,
	TOKEN_ELSE, TOKEN_EXCEPT, TOKEN_FINALLY, TOKEN_FOR,
	TOKEN_FROM, TOKEN_GLOBAL, TOKEN_IF, TOKEN_IMPORT,
	TOKEN_IN, TOKEN_IS, TOKEN_LAMBDA, TOKEN_MATCH,
	TOKEN_NONLOCAL, TOKEN_NOT, TOKEN_OR, TOKEN_PASS,
	TOKEN_RAISE, TOKEN_RETURN, TOKEN_TRY, TOKEN_WHILE,
	TOKEN_WITH, TOKEN_YIELD, TOKEN_FALSE, TOKEN_NONE,
	TOKEN_TRUE,

	TOKEN_ERROR, TOKEN_EOF
} TokenType;

typedef struct {
	TokenType type;
	const char* start;
	int length;
	int line;
} Token;

void initScanner(const char* source);
Token scanToken();

#endif
